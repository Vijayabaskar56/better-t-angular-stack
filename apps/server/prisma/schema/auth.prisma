model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  email String @unique

  emailVerified Boolean @default(false)

  image String?

  createdAt DateTime @default(now())

  updatedAt DateTime @default(now())

  twoFactorEnabled Boolean @default(false)

  sessions Session[]

  accounts Account[]

  twoFactors TwoFactor[]

  passkeys Passkey[]

  subscriptions Subscription[]
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  token String @unique

  expiresAt DateTime

  ipAddress String?

  userAgent String?

  createdAt DateTime @default(now())

  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  accountId String @unique

  providerId String

  accessToken String?

  refreshToken String?

  accessTokenExpiresAt DateTime?

  refreshTokenExpiresAt DateTime?

  scope String?

  idToken String?

  password String?

  createdAt DateTime @default(now())

  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Verification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String

  value String

  expiresAt DateTime

  createdAt DateTime @default(now())

  updatedAt DateTime @default(now())
}

model TwoFactor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  secret String

  backupCodes String?

  digits Int @default(6)

  period Int @default(30)

  otpOptions Json @default("{}")

  backupCodeOptions Json @default("{}")

  user User @relation(fields: [userId], references: [id])
}

model Passkey {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String?

  publicKey String?

  userId String @db.ObjectId

  credentialID String?

  counter Int?

  deviceType String?

  backedUp Boolean?

  transports String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  plan String?

  referenceId String @db.ObjectId

  stripeCustomerId String?

  stripeSubscriptionId String?

  status String?

  periodStart DateTime?

  periodEnd DateTime?

  cancelAtPeriodEnd Boolean?

  seats Int?

  trialStart DateTime?

  trialEnd DateTime?

  user User @relation(fields: [referenceId], references: [id])
}
